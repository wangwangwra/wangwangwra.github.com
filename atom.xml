<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[T_T]]></title>
  <link href="http://wangwangwra.github.com/atom.xml" rel="self"/>
  <link href="http://wangwangwra.github.com/"/>
  <updated>2012-12-22T15:02:08+08:00</updated>
  <id>http://wangwangwra.github.com/</id>
  <author>
    <name><![CDATA[wang]]></name>
    <email><![CDATA[wangwangwar@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[uwsgi tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/21/uwsgi-tips/"/>
    <updated>2012-12-21T22:28:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/21/uwsgi-tips</id>
    <content type="html"><![CDATA[<h3>有关参数</h3>

<h4>启动参数</h4>

<ul>
<li><p>监视模块，改变后重载，方法一</p>

<pre><code>  uwsgi --master --enable-threads --py-auto-reload &lt;secs&gt; \

  --py-auto-reload-ignore /path/to/ignored/file1 \

  [--py-auto-reload-ignore /path/to/ignored/file2]
</code></pre>

<p>  每隔 <secs> 秒扫描一次。可以设置忽略某些模块。</p></li>
<li><p>监视模块，改变后重载，方法二</p>

<pre><code>  uwsgi --touch-reload /path/to/file1 [--touch-reload /path/to/file2]
</code></pre></li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/17/linux-tips/"/>
    <updated>2012-12-17T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/17/linux-tips</id>
    <content type="html"><![CDATA[<h3>以16进制方式查看文件</h3>

<pre><code>xxd &lt;file&gt;
</code></pre>

<p>也可以用vim查看</p>

<pre><code>vim -b &lt;file&gt;
</code></pre>

<p>转换为16进制</p>

<pre><code>:%!xxd
</code></pre>

<p>最后再转换回来</p>

<pre><code>:%!xxd -r
</code></pre>

<h3>用 sed 删除文件中特定行</h3>

<p>删除第三行：</p>

<pre><code>sed -i '3d' file
</code></pre>

<p>删除以 junk 开头的行：</p>

<pre><code>sed -i '/^junk/d' file
</code></pre>

<p>删除包含 junk 的行</p>

<pre><code>sed -i '/junk/d' file
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ldd tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/17/ldd-tips/"/>
    <updated>2012-12-17T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/17/ldd-tips</id>
    <content type="html"><![CDATA[<h3>关于机制和策略(mechanism and policy)</h3>

<blockquote><p>The distinction between mechanism and policy is one of the best ideas
behind the Unix design. Most programming problems can indeed be split
into two parts: &#8220;what capabilities are to be provided&#8221; (the mechanism)
and &#8220;how those capabilities can be used&#8221; (the policy). If the two
issues are addressed by different parts of the program, or even by
different programs altogether, the software package is much easier to
develop and to adapt to particular needs.</p></blockquote>

<p>长久以来，我都把这个概念与接口和实现(interface and implementation)混淆在
一起，傻傻分不清楚。谁谁谁(乔治~康师傅？)说过，如果能把一个概念向你隔壁的
花朵或者大妈解释清楚，那么你就是真的理解了。好吧，我试试吧：</p>

<p>拿锤子举个例吧，你捡到一个锤子，这就是你的”命运之锤“，你的”机制“，拿来干嘛
呢？你可以用锤子砸核桃，砸冰箱(老罗？)，或者表演杂技(档部碎大石？)。这就是
策略。换个角度，锤子提供锤东西的能力可以说是个接口，而具体锤子是用铁做的，
铜做的，还是用钛合金做的，就是实现。</p>

<h3>关于抢占式(preemptible)和可重入(reentrant)</h3>

<blockquote><p>Finally, in 2.6, kernel code has been made preemptible; this change
causes even uniprocessor systems to have many of the same concurrency
issues as multiprocessor systems.</p>

<p>As a result, Linux kernel code, including driver code, must be <em>reentrant</em>
&#8211; it must be capable of running in more than one context at the same
time. Data structures must be carefully designed to keep multiple threads
of execution separate, and the code must take care to access shared data
in ways that prevent corruption of the data.</p></blockquote>

<h3>关于内核模块编译</h3>

<p>内核使用一套自己的Makefile系统(Kbuild)来生成内核映像和模块二进制文件，
可能是目前最复杂的makefile系统了吧。makefile 的写法与应用程序的写法也大不相同。
但是文本配置起来都非常简单(更不用提各种可视化配置界面了)，就几条规则:</p>

<ol>
<li><p>持久编译进内核映像</p>

<pre><code> obj-y += obj1.o obj2.o
</code></pre></li>
<li><p>编译成模块二进制文件(<code>*.ko</code>)</p>

<pre><code> obj-m += obj-m1.o obj-m2.o
</code></pre></li>
<li><p>不进行编译</p>

<pre><code> obj-n += obj-n1.o obj-n2.o
</code></pre></li>
<li><p>多个目标文件链接成一个</p>

<pre><code> obj-y += abc.o
 abc-y := a.o b.o c.o
</code></pre></li>
<li><p>利用Kconfig定制功能</p>

<pre><code> obj-$(CONFIG_FOO) += foo.o
</code></pre>

<p> 当运行 <code>make menuconfig</code>或类似的可视化配置界面时，其实就是在配置一个一个
 的CONFIG_XXX，正如你所想的，一般来说三种值，y|m|n 。配置好后将在顶层目录
 生成 <code>.config</code>文件供后面编译参考。</p></li>
<li><p>自动切换目录</p>

<pre><code> obj-y += power/
</code></pre>

<p> 这里加入的不是文件，而是目录，意思是切换到 power/ 目录，并处理其中的
 Makefile。</p></li>
</ol>


<p>掌握以上六点差不多你就掌握了内核源码中大部分的 Makefile 了，就能随心所欲得
定制内核功能了。是不是很简单:)</p>

<p>对于源码树外的自己编写的内核模块的话，makefile 会稍许复杂。典型的(节选自
kernel/Documentation/kbuild/modules.txt):</p>

<pre><code>...
ifneq ($(KERNELRELEASE),)
# kbuild part of makefile
obj-m  := hello.o

else
# normal makefile
KDIR ?= /lib/modules/$(shell uname -r)/build
PWD := $(shell pwd)

default:
    $(MAKE) -C $(KDIR) M=$(PWD) modules

endif
</code></pre>

<p>当我们运行<code>make</code>时，这个makefile会被读取两次。第一次，变量 <code>KERNELRELEASE</code>
还没有设置，所以会执行 else 内的代码块。 <code>KDIR</code>指定内核源码路径，<code>PWD</code>指定
当前路径，即模块源码路径。我们来简单分析下命令
<code>$(MAKE) -C $(KDIR) M=$(PWD) modules</code>:</p>

<ol>
<li><code>$(MAKE)</code>是makefile的系统变量，即<code>make</code>命令。</li>
<li><code>-C $(KDIR)</code>是<code>make</code>的一个选项，意思是在读取makefile之前，把当前路径切换到
<code>KDIR</code>下，那么此时载入的makefile就是内核源码顶层目录的Makefile，而不再是模块目录
下的了。</li>
<li><code>M=$(PWD)</code>其实是内核源码主 Makefile 里的一个对外部模块的支持选项
(External module support).<code>make M=dir modules</code>的功能就是联编 dir 目录下的
所有模块。</li>
</ol>


<p>所以，合起来看，这条命令就是切换至内核源码顶层目录，载入主 Makefile，联编模块
目录下的所有指定模块。这个联编过程即，第二次载入模块 Makefile，<em>注意</em>，
主 Makefile 内定义了 KERNELRELEASE 变量，这次就执行<code>obj-m += hello.o</code>命令了。
你看，不就是源码树内的模块编译规则吗？</p>

<p>今天在 Hacker News 上看到一篇写 twitter，facebook，youtube 的 humble Beginnings
<a href="http://blog.alexmaccaw.com/humble-beginnings">[h]</a>，挺有意思的(youtube 最初居然是个约炮网站。。现在微信拍马赶上。。呃扯远了)。
最后一节提到：</p>

<blockquote><p>Simple in terms of product mind you, not necessarily technically.</p>

<p>&#8230;&#8230;</p>

<p>Technical difficulties though, were in service of product simplicity.</p></blockquote>

<p>Kbuild 系统这么复杂，但是其目的不正是为了给我们提供简便而又强大的功能吗？</p>

<p>最后两段话讲了创业的事，我文笔拙劣就不翻译了：</p>

<blockquote><p>The key is to find a market with a small and easily definable problem to
solve, but also a market large enough to accomodate further growth and
disruption. Solving a specific problem will get your foot in the door, giving
you leverage to throw it right open later down the line.</p>

<p>Being flexible is much more important than knowing the end game. Just come
in, build something small, and grow it one step at a time. Everything starts
from humble beginnings.</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[llvm [1]]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/16/llvm-1/"/>
    <updated>2012-12-16T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/16/llvm-1</id>
    <content type="html"><![CDATA[<p>llvm bundle outline <a href="http://llvm.org/docs/GettingStarted.html#llvm-tools">[llvm1]</a></p>

<h3>bugpoint</h3>

<blockquote><p>bugpoint is used to debug optimization passes or code generation
backends by narrowing down the given test case to the minimum number
of passes and/or instructions that still cause a problem, whether it
is a crash or miscompilation.</p></blockquote>

<h3>llvm-ar</h3>

<blockquote><p>The archiver produces an archive containing the given LLVM bitcode
files, optionally with an index for faster lookup.</p></blockquote>

<h3>llvm-as</h3>

<blockquote><p>The assembler transforms the human readable LLVM assembly to LLVM
bitcode.</p></blockquote>

<h3>llvm-dis</h3>

<blockquote><p>The disassembler transforms the LLVM bitcode to human readable LLVM
assembly.</p></blockquote>

<h3>llvm-link</h3>

<blockquote><p>llvm-link, not surprisingly, links multiple LLVM modules into a
single program.</p></blockquote>

<h3>lli</h3>

<blockquote><p>lli is the LLVM interpreter, which can directly execute LLVM bitcode
(although very slowly&#8230;). For architectures that support it
(currently x86, Sparc, and PowerPC), by default, lli will function as
a Just-In-Time compiler (if the functionality was compiled in), and
will execute the code much faster than the interpreter.</p></blockquote>

<h3>llc</h3>

<blockquote><p>llc is the LLVM backend compiler, which translates LLVM bitcode to a
native code assembly file or to C code (with the -march=c option).</p></blockquote>

<h3>opt</h3>

<blockquote><p>opt reads LLVM bitcode, applies a series of LLVM to LLVM
transformations (which are specified on the command line), and then
outputs the resultant bitcode. The ‘opt -help‘ command is a good way
to get a list of the program transformations available in LLVM.</p>

<p>opt can also be used to run a specific analysis on an input LLVM
bitcode file and print out the results. It is primarily useful for
debugging analyses, or familiarizing yourself with what an analysis
does.</p></blockquote>

<h3>llvm-config</h3>

<blockquote><p>llvm-config can print the compiler flags, linker flags and object
 libraries needed to link against llvm.</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mail client [1]]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/15/mail-client-project-1/"/>
    <updated>2012-12-15T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/15/mail-client-project-1</id>
    <content type="html"><![CDATA[<h1>resources</h1>

<ul>
<li><p>YAML <a href="http://www.yaml.org/spec/1.2/spec.html">[y]</a></p>

<p>  Pass the neccessary info like email address, password in an easy manner.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/09/git-tips/"/>
    <updated>2012-12-09T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/09/git-tips</id>
    <content type="html"><![CDATA[<ul>
<li><p>modify the <em>last</em> commit</p>

<pre><code>  git commit --amend
</code></pre></li>
<li><p>modify the <em>last 5</em> commit</p>

<pre><code>  git rebase -i HEAD~5
</code></pre>

<p>  modify <code>pick</code> of which you want to modify to <code>edit</code> and :wq to exit.</p>

<pre><code>  git log
</code></pre>

<p>  you can find you are at the commit which you <code>edit</code>, do as modify the
  <em>last</em> commit and</p>

<pre><code>  git commit --amend
</code></pre>

<p>  back by</p>

<pre><code>  git rebase --continue
</code></pre></li>
<li><p>undo all the works, back to latest commit state</p>

<pre><code>  git reset --hard HEAD
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kung Fu Website]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/03/kung-fu-website/"/>
    <updated>2012-12-03T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/03/kung-fu-website</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/02/vim-tips/"/>
    <updated>2012-12-02T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/02/vim-tips</id>
    <content type="html"><![CDATA[<ul>
<li><p>back to last cursor position</p>

<pre><code>  ctrl-o
</code></pre></li>
<li><p>format the code</p>

<pre><code>  gg=G
</code></pre></li>
<li><p>apply vim cmd inside a file</p>

<pre><code>  /* vim: set XXX=XXX: */
</code></pre></li>
<li><p>fold</p>

<pre><code>  :set foldmethod=XXX
</code></pre>

<p>  methods(XXX) usually use &#8216;indent&#8217; or &#8216;marker&#8217;</p>

<p>  cmd:</p>

<ul>
<li>zc fold</li>
<li>zC fold all</li>
<li>zo unfold</li>
<li>zO unfold all</li>
<li>[z goto current begin</li>
<li>]z goto current end</li>
<li>zj goto next fold</li>
<li>zk goto last fold</li>
</ul>
</li>
<li><p>undo</p>

<pre><code>  u
</code></pre></li>
<li><p>redo</p>

<pre><code>  ctrl-r
</code></pre></li>
<li><p>in C file goto header file</p>

<pre><code>  gf
</code></pre>

<p>  If you encounter &#8220;在路径中找不到头文件$#$#%@~&#8221;, add your path:</p>

<pre><code>  set path+=/your/path/1,/your/path/2
</code></pre>

<p>  <em>WARNING</em>, your path is added in the tail, after default path <code>.</code> and
  <code>/usr/include</code>. That means system search file from <code>.</code> first, then
  <code>/usr/include</code>, finally your path. If sequence matters, do this:</p>

<pre><code>  set path=.,/your/path/1,/your/path/2,/usr/include
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[something original from twitter bootstrap]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/02/something-original-from-twitter-bootstrap/"/>
    <updated>2012-12-02T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/02/something-original-from-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>I clone <a href="http://jekyllbootstrap.com" title="jekyll bootstrap">plusjade&#8217;s jekyll-bootstrap</a> to setup my <a href="http://wangwangwar.github.com" title="wangwangwar@github">blog@github</a>. I want
to make the pages more charming and learn a little CSS btw. Plusjade&#8217;s
jekyll-bootstrap embeded twitter&#8217;s bootstrap but out-of-dated. So I clone it
from <a href="http://twitter.github.com/bootstrap" title="twitter/bootstrap">twitter/bootstrap@github</a>. Then it requires node.js, I jump to
<a href="http://nodejs.org" title="node.js">node.js</a> and search <a href="https://en.wikipedia.org/wiki/Nodejs" title="nodejs@wiki">@wikipedia</a> btw. OMG, I get interested in Google&#8217;s
<a href="https://en.wikipedia.org/wiki/V8_(JavaScript_engine)" title="V8 JS engine">V8 JS engine</a> and <a href="https://en.wikipedia.org/wiki/Push_technology" title="push tech">push technology</a>:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[software is mathematics]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/02/software-is-mathematics/"/>
    <updated>2012-12-02T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/02/software-is-mathematics</id>
    <content type="html"><![CDATA[<ul>
<li>mathematics is a language</li>
<li>languages are written with symbols</li>
<li>symbols are abstract ideas, more abstract more powerful</li>
<li>symbols need not be watched by humans to have meanings</li>
<li>computaions don&#8217;t process electrons, computations process symbols</li>
<li>bits must be organized into syntax</li>
<li>the mathematical language my also be given some non mathematical interpretations</li>
<li>algorithms are manipulations of the uninterpreted symbols and their syntactic arrangement</li>
<li>algorithms and computations are not physical entities but contents</li>
<li>mathematicians have discovered a special category of algorithms called
universal algorithms, such as <em>universal Turing machine</em>, <em>instruction cycle</em>,
<em>Horn clauses</em>, <em>normal order B-reduction</em></li>
<li>a program is data</li>
<li>most modern general purpose computers are built according to a common
engineering pattern called the <em>stored program computer architecture</em></li>
<li>we say software is mathematics because the execution of all computer programs
is the execution of a universal mathematical algorithm. What the computer
does is a mathematical computation according to a mathematical algorithm.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[css selector]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/11/30/css/"/>
    <updated>2012-11-30T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/11/30/css</id>
    <content type="html"><![CDATA[<h3>basic selector</h3>

<ul>
<li><p>tag selector</p>

<p>  html pages tags.</p>

<pre><code>  # html
  &lt;h1&gt;HEADER&lt;/h1&gt;
  # css
  h1 { color: red; font-size: 25px; }
</code></pre></li>
<li><p>class selector</p>

<p>  In html we can put tags into differet class, like</p>

<pre><code>  # html
  &lt;p class="red"&gt;class selector 1&lt;/p&gt;
  &lt;p class="green"&gt;class selector 2&lt;/p&gt;
  # css
  .red { color: red; }
  .green { color: green; }
</code></pre></li>
<li><p>ID selector</p>

<p>  It&#8217;s almost same with class selector. The difference is that ID selector
  can only be used once in a single html pages (class selector can be used
  more than once).</p>

<pre><code>  # html
  &lt;p id="one"&gt;ID selector 1&lt;/p&gt;
  &lt;p id="two"&gt;ID selector 2&lt;/p&gt;
  # css
  #one { font-weight: bold; }
  #two { font-size: 30px; }
</code></pre></li>
</ul>


<h3>complex selector</h3>

<p>Mix up the three basic seletor, we can get more powerful and more accurate
selection.</p>

<ul>
<li><p>intersection selector</p>

<p>  Mix up two basic selector and get their intersection.
  The first must be <em>tag selector</em> and the second can be <em>class selector</em>
  or <em>ID selector</em>. Space is not allowed between the two selectors.</p>

<pre><code>  h1, h2, h3, h4, h5, p { color: purple; font-size: 15px; }
  h2.special { text-decoration: underline; }
</code></pre></li>
<li><p>child selector</p>

<pre><code>  # html
  &lt;body&gt;
      &lt;p&gt;Nested&lt;span&gt;SPAN&lt;/span&gt;is here.&lt;/p&gt;
      &lt;span&gt;Outer span&lt;/span&gt;is there.
  &lt;/body&gt;    
  # css
  p span { color: red; }
  span { color: blue; }
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux boot]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/11/29/linux-boot/"/>
    <updated>2012-11-29T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/11/29/linux-boot</id>
    <content type="html"><![CDATA[<ul>
<li>vmlinux <a href="https://en.wikipedia.org/wiki/Vmlinux" title="wiki">v</a></li>
<li>vmlinuz

<ul>
<li>zImage</li>
<li>bzImage <a href="https://en.wikipedia.org/wiki/File:Anatomy-of-bzimage.png" title="wiki">b</a></li>
</ul>
</li>
<li>system.map <a href="https://en.wikipedia.org/wiki/System.map" title="wiki">s</a></li>
<li>initrd <a href="https://en.wikipedia.org/wiki/Initrd" title="wiki">i1</a> <a href="https://www.ibm.com/developerworks/cn/linux/l-k26initrd" title="ibm">i2</a> <a href="https://www.ibm.com/developerworks/cn/linux/l-initrd.html" title="ibm">i3</a></li>
<li>bootloader

<ul>
<li>GRUB</li>
<li>LILO</li>
</ul>
</li>
<li>Linux startup process <a href="https://en.wikipedia.org/wiki/Linux_startup_process" title="wiki">l</a>

<ul>
<li>BIOS</li>
<li>boot loader

<ul>
<li>GRUB</li>
<li>LILO</li>
</ul>
</li>
<li>kernel

<ul>
<li>kernel loading stage</li>
<li>kernel startup stage</li>
</ul>
</li>
<li>init process</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dnsmasq]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/11/28/dnsmasq/"/>
    <updated>2012-11-28T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/11/28/dnsmasq</id>
    <content type="html"><![CDATA[<ol>
<li><p>Close system&#8217;s NetworkManager built-in dnsmasq, prepare to run stand-alone dnsmasq. <a href="http://sokratisg.wordpress.com/2012/03/31/ubuntu-precise-12-04-get-rid-of-nms-dnsmasq-and-setup-your-own">1</a></p>

<pre><code> vi /etc/NetworkManger/NetworkManager.conf
 #dns=dnsmasq
 restart network-manager
</code></pre></li>
<li><p>Install complete dnsmasq.</p>

<pre><code> apt-get install dnsmasq
</code></pre></li>
<li><p>Configure dnsmasq, some necessary options:</p>

<pre><code> vi /etc/dnsmasq.conf
 # get killgfw.conf later
 domain-needed
 resolv-file=/etc/dnsmasq.d/killgfw.conf
 cache-size=10000
 strict-order
 no-resolv
 no-poll
</code></pre></li>
<li><p>Download killgfw.conf, you can modify as you like. <a href="https://code.google.com/p/autoddvpn/wiki/DNSMasq">2</a> <a href="http://ninehills.info/2011/12/17/dnsmasq.html">3</a></p>

<pre><code> mkdir -pv /etc/dnsmasq.d 
 wget https://smarthosts.googlecode.com/svn/trunk/dnsmasq.conf \
     -O /etc/dnsmasq.d/killgfw.conf
</code></pre></li>
<li><p>Start dnsmasq service. <a href="https://code.google.com/p/autoddvpn/wiki/DNSMasq">s</a></p>

<pre><code> service dnsmasq start
</code></pre></li>
<li><p>Disable pppoe&#8217;s dns function. <a href="http://linux.die.net/man/5/pppoe.conf">d</a></p>

<p> open pppoe&#8217;s configure file</p>

<pre><code> vi /etc/ppp/pppoe.conf
</code></pre>

<p> modify DNS type</p>

<pre><code> DNSTYPE=NOCHANGE
</code></pre>

<p> and delete system&#8217;s resolv.conf</p>

<pre><code> rm /etc/resolv.conf
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Become A Hacker]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/11/26/how-to-become-a-hacker/"/>
    <updated>2012-11-26T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/11/26/how-to-become-a-hacker</id>
    <content type="html"><![CDATA[<p><a href="mailto:esr@thyrsus.com">Eric Steven Raymond</a></p>

<p>Thyrsus Enterprises</p>

<p><strong>Copyright © 2001 Eric S. Raymond</strong></p>

<p><em>Revision History</em></p>

<pre><code>Revision 1.42   22 Oct 2010 esr
Added "Historical note".
Revision 1.40   3 Nov 2008  esr
Link fixes.
Revision 1.39   14 Aug Jan 2008 esr
Link fixes.
Revision 1.38   8 Jan 2008  esr
Deprecate Java as a language to learn early.
Revision 1.37   4 Oct 2007  esr
Recommend Ubuntu as a Unix distro for newbies.
</code></pre>

<h2>Table of Contents</h2>

<ul>
<li>Why This Document?</li>
<li>What Is a Hacker?</li>
<li>The Hacker Attitude</li>
<li>Basic Hacking Skills</li>
<li>Status in the Hacker Culture</li>
<li>The Hacker/Nerd Connection</li>
<li>Points For Style</li>
<li>Historical Note: Hacking, Open Source, and Free Software</li>
<li>Other Resources</li>
<li>Frequently Asked Questions</li>
</ul>


<h3>Why This Document?</h3>

<p>As editor of the Jargon File and author of a few other well-known documents of similar nature, I often get email requests from enthusiastic network newbies asking (in effect) &#8220;how can I learn to be a wizardly hacker?&#8221;. Back in 1996 I noticed that there didn&#8217;t seem to be any other FAQs or web documents that addressed this vital question, so I started this one. A lot of hackers now consider it definitive, and I suppose that means it is. Still, I don&#8217;t claim to be the exclusive authority on this topic; if you don&#8217;t like what you read here, write your own.</p>

<p>If you are reading a snapshot of this document offline, the current version lives at <a href="">http://catb.org/~esr/faqs/hacker-howto.html</a>.</p>

<p><strong>Note: there is a list of Frequently Asked Questions at the end of this document. Please read these—twice—before mailing me any questions about this document.</strong></p>

<p>Numerous translations of this document are available: Arabic Bulgarian, Catalan, Chinese (Simplified), Danish, Dutch, Estonian, Farsi, Finnish, German, Greek Hebrew, Italian Japanese, Norwegian, Polish, Portuguese (Brazilian), Romanian Russian Spanish, Turkish, and Swedish. Note that since this document changes occasionally, they may be out of date to varying degrees.</p>

<p>The five-dots-in-nine-squares diagram that decorates this document is called a glider. It is a simple pattern with some surprising properties in a mathematical simulation called Life that has fascinated hackers for many years. I think it makes a good visual emblem for what hackers are like — abstract, at first a bit mysterious-seeming, but a gateway to a whole world with an intricate logic of its own. Read more about the glider emblem here.</p>

<h3>What Is a Hacker?</h3>

<p>The Jargon File contains a bunch of definitions of the term ‘hacker’, most having to do with technical adeptness and a delight in solving problems and overcoming limits. If you want to know how to become a hacker, though, only two are really relevant.</p>

<p>There is a community, a shared culture, of expert programmers and networking wizards that traces its history back through decades to the first time-sharing minicomputers and the earliest ARPAnet experiments. The members of this culture originated the term ‘hacker’. Hackers built the Internet. Hackers made the Unix operating system what it is today. Hackers run Usenet. Hackers make the World Wide Web work. If you are part of this culture, if you have contributed to it and other people in it know who you are and call you a hacker, you&#8217;re a hacker.</p>

<p>The hacker mind-set is not confined to this software-hacker culture. There are people who apply the hacker attitude to other things, like electronics or music — actually, you can find it at the highest levels of any science or art. Software hackers recognize these kindred spirits elsewhere and may call them ‘hackers’ too — and some claim that the hacker nature is really independent of the particular medium the hacker works in. But in the rest of this document we will focus on the skills and attitudes of software hackers, and the traditions of the shared culture that originated the term ‘hacker’.</p>

<p>There is another group of people who loudly call themselves hackers, but aren&#8217;t. These are people (mainly adolescent males) who get a kick out of breaking into computers and phreaking the phone system. Real hackers call these people ‘crackers’ and want nothing to do with them. Real hackers mostly think crackers are lazy, irresponsible, and not very bright, and object that being able to break security doesn&#8217;t make you a hacker any more than being able to hotwire cars makes you an automotive engineer. Unfortunately, many journalists and writers have been fooled into using the word ‘hacker’ to describe crackers; this irritates real hackers no end.</p>

<p>The basic difference is this: hackers build things, crackers break them.</p>

<p>If you want to be a hacker, keep reading. If you want to be a cracker, go read the alt.2600 newsgroup and get ready to do five to ten in the slammer after finding out you aren&#8217;t as smart as you think you are. And that&#8217;s all I&#8217;m going to say about crackers.</p>

<h3>The Hacker Attitude</h3>

<ol>
<li>The world is full of fascinating problems waiting to be solved.</li>
<li>No problem should ever have to be solved twice.</li>
<li>Boredom and drudgery are evil.</li>
<li>Freedom is good.</li>
<li>Attitude is no substitute for competence.</li>
</ol>


<p>Hackers solve problems and build things, and they believe in freedom and voluntary mutual help. To be accepted as a hacker, you have to behave as though you have this kind of attitude yourself. And to behave as though you have the attitude, you have to really believe the attitude.</p>

<p>But if you think of cultivating hacker attitudes as just a way to gain acceptance in the culture, you&#8217;ll miss the point. Becoming the kind of person who believes these things is important for you — for helping you learn and keeping you motivated. As with all creative arts, the most effective way to become a master is to imitate the mind-set of masters — not just intellectually but emotionally as well.</p>

<p>Or, as the following modern Zen poem has it:</p>

<pre><code>To follow the path:
look to the master,
follow the master,
walk with the master,
see through the master,
become the master.
</code></pre>

<p>So, if you want to be a hacker, repeat the following things until you believe them:</p>

<h4>The world is full of fascinating problems waiting to be solved.</h4>

<p>Being a hacker is lots of fun, but it&#8217;s a kind of fun that takes lots of effort. The effort takes motivation. Successful athletes get their motivation from a kind of physical delight in making their bodies perform, in pushing themselves past their own physical limits. Similarly, to be a hacker you have to get a basic thrill from solving problems, sharpening your skills, and exercising your intelligence.</p>

<p>If you aren&#8217;t the kind of person that feels this way naturally, you&#8217;ll need to become one in order to make it as a hacker. Otherwise you&#8217;ll find your hacking energy is sapped by distractions like sex, money, and social approval.</p>

<p>(You also have to develop a kind of faith in your own learning capacity — a belief that even though you may not know all of what you need to solve a problem, if you tackle just a piece of it and learn from that, you&#8217;ll learn enough to solve the next piece — and so on, until you&#8217;re done.)</p>

<h4>No problem should ever have to be solved twice.</h4>

<p>Creative brains are a valuable, limited resource. They shouldn&#8217;t be wasted on re-inventing the wheel when there are so many fascinating new problems waiting out there.</p>

<p>To behave like a hacker, you have to believe that the thinking time of other hackers is precious — so much so that it&#8217;s almost a moral duty for you to share information, solve problems and then give the solutions away just so other hackers can solve new problems instead of having to perpetually re-address old ones.</p>

<p>Note, however, that &#8220;No problem should ever have to be solved twice.&#8221; does not imply that you have to consider all existing solutions sacred, or that there is only one right solution to any given problem. Often, we learn a lot about the problem that we didn&#8217;t know before by studying the first cut at a solution. It&#8217;s OK, and often necessary, to decide that we can do better. What&#8217;s not OK is artificial technical, legal, or institutional barriers (like closed-source code) that prevent a good solution from being re-used and force people to re-invent wheels.</p>

<p>(You don&#8217;t have to believe that you&#8217;re obligated to give all your creative product away, though the hackers that do are the ones that get most respect from other hackers. It&#8217;s consistent with hacker values to sell enough of it to keep you in food and rent and computers. It&#8217;s fine to use your hacking skills to support a family or even get rich, as long as you don&#8217;t forget your loyalty to your art and your fellow hackers while doing it.)</p>

<h4>Boredom and drudgery are evil.</h4>

<p>Hackers (and creative people in general) should never be bored or have to drudge at stupid repetitive work, because when this happens it means they aren&#8217;t doing what only they can do — solve new problems. This wastefulness hurts everybody. Therefore boredom and drudgery are not just unpleasant but actually evil.</p>

<p>To behave like a hacker, you have to believe this enough to want to automate away the boring bits as much as possible, not just for yourself but for everybody else (especially other hackers).</p>

<p>(There is one apparent exception to this. Hackers will sometimes do things that may seem repetitive or boring to an observer as a mind-clearing exercise, or in order to acquire a skill or have some particular kind of experience you can&#8217;t have otherwise. But this is by choice — nobody who can think should ever be forced into a situation that bores them.)</p>

<h4>Freedom is good.</h4>

<p>Hackers are naturally anti-authoritarian. Anyone who can give you orders can stop you from solving whatever problem you&#8217;re being fascinated by — and, given the way authoritarian minds work, will generally find some appallingly stupid reason to do so. So the authoritarian attitude has to be fought wherever you find it, lest it smother you and other hackers.</p>

<p>(This isn&#8217;t the same as fighting all authority. Children need to be guided and criminals restrained. A hacker may agree to accept some kinds of authority in order to get something he wants more than the time he spends following orders. But that&#8217;s a limited, conscious bargain; the kind of personal surrender authoritarians want is not on offer.)</p>

<p>Authoritarians thrive on censorship and secrecy. And they distrust voluntary cooperation and information-sharing — they only like ‘cooperation’ that they control. So to behave like a hacker, you have to develop an instinctive hostility to censorship, secrecy, and the use of force or deception to compel responsible adults. And you have to be willing to act on that belief.</p>

<h4>Attitude is no substitute for competence.</h4>

<p>To be a hacker, you have to develop some of these attitudes. But copping an attitude alone won&#8217;t make you a hacker, any more than it will make you a champion athlete or a rock star. Becoming a hacker will take intelligence, practice, dedication, and hard work.</p>

<p>Therefore, you have to learn to distrust attitude and respect competence of every kind. Hackers won&#8217;t let posers waste their time, but they worship competence — especially competence at hacking, but competence at anything is valued. Competence at demanding skills that few can master is especially good, and competence at demanding skills that involve mental acuteness, craft, and concentration is best.</p>

<p>If you revere competence, you&#8217;ll enjoy developing it in yourself — the hard work and dedication will become a kind of intense play rather than drudgery. That attitude is vital to becoming a hacker.</p>

<h3>Basic Hacking Skills</h3>

<ol>
<li>Learn how to program.</li>
<li>Get one of the open-source Unixes and learn to use and run it.</li>
<li>Learn how to use the World Wide Web and write HTML.</li>
<li>If you don&#8217;t have functional English, learn it.</li>
</ol>


<p>The hacker attitude is vital, but skills are even more vital. Attitude is no substitute for competence, and there&#8217;s a certain basic toolkit of skills which you have to have before any hacker will dream of calling you one.</p>

<p>This toolkit changes slowly over time as technology creates new skills and makes old ones obsolete. For example, it used to include programming in machine language, and didn&#8217;t until recently involve HTML. But right now it pretty clearly includes the following:</p>

<h4>Learn how to program.</h4>

<p>This, of course, is the fundamental hacking skill. If you don&#8217;t know any computer languages, I recommend starting with Python. It is cleanly designed, well documented, and relatively kind to beginners. Despite being a good first language, it is not just a toy; it is very powerful and flexible and well suited for large projects. I have written a more detailed evaluation of Python. Good tutorials are available at the Python web site.</p>

<p>I used to recommend Java as a good language to learn early, but this critique has changed my mind (search for “The Pitfalls of Java as a First Programming Language” within it). A hacker cannot, as they devastatingly put it “approach problem-solving like a plumber in a hardware store”; you have to know what the components actually do. Now I think it is probably best to learn C and Lisp first, then Java.</p>

<p>There is perhaps a more general point here. If a language does too much for you, it may be simultaneously a good tool for production and a bad one for learning. It&#8217;s not only languages that have this problem; web application frameworks like RubyOnRails, CakePHP, Django may make it too easy to reach a superficial sort of understanding that will leave you without resources when you have to tackle a hard problem, or even just debug the solution to an easy one.</p>

<p>If you get into serious programming, you will have to learn C, the core language of Unix. C++ is very closely related to C; if you know one, learning the other will not be difficult. Neither language is a good one to try learning as your first, however. And, actually, the more you can avoid programming in C the more productive you will be.</p>

<p>C is very efficient, and very sparing of your machine&#8217;s resources. Unfortunately, C gets that efficiency by requiring you to do a lot of low-level management of resources (like memory) by hand. All that low-level code is complex and bug-prone, and will soak up huge amounts of your time on debugging. With today&#8217;s machines as powerful as they are, this is usually a bad tradeoff — it&#8217;s smarter to use a language that uses the machine&#8217;s time less efficiently, but your time much more efficiently. Thus, Python.</p>

<p>Other languages of particular importance to hackers include Perl and LISP. Perl is worth learning for practical reasons; it&#8217;s very widely used for active web pages and system administration, so that even if you never write Perl you should learn to read it. Many people use Perl in the way I suggest you should use Python, to avoid C programming on jobs that don&#8217;t require C&#8217;s machine efficiency. You will need to be able to understand their code.</p>

<p>LISP is worth learning for a different reason — the profound enlightenment experience you will have when you finally get it. That experience will make you a better programmer for the rest of your days, even if you never actually use LISP itself a lot. (You can get some beginning experience with LISP fairly easily by writing and modifying editing modes for the Emacs text editor, or Script-Fu plugins for the GIMP.)</p>

<p>It&#8217;s best, actually, to learn all five of Python, C/C++, Java, Perl, and LISP. Besides being the most important hacking languages, they represent very different approaches to programming, and each will educate you in valuable ways.</p>

<p>But be aware that you won&#8217;t reach the skill level of a hacker or even merely a programmer simply by accumulating languages — you need to learn how to think about programming problems in a general way, independent of any one language. To be a real hacker, you need to get to the point where you can learn a new language in days by relating what&#8217;s in the manual to what you already know. This means you should learn several very different languages.</p>

<p>I can&#8217;t give complete instructions on how to learn to program here — it&#8217;s a complex skill. But I can tell you that books and courses won&#8217;t do it — many, maybe most of the best hackers are self-taught. You can learn language features — bits of knowledge — from books, but the mind-set that makes that knowledge into living skill can be learned only by practice and apprenticeship. What will do it is (a) reading code and (b) writing code.</p>

<p>Peter Norvig, who is one of Google&#8217;s top hackers and the co-author of the most widely used textbook on AI, has written an excellent essay called Teach Yourself Programming in Ten Years. His &#8220;recipe for programming success&#8221; is worth careful attention.</p>

<p>Learning to program is like learning to write good natural language. The best way to do it is to read some stuff written by masters of the form, write some things yourself, read a lot more, write a little more, read a lot more, write some more &#8230; and repeat until your writing begins to develop the kind of strength and economy you see in your models.</p>

<p>Finding good code to read used to be hard, because there were few large programs available in source for fledgeling hackers to read and tinker with. This has changed dramatically; open-source software, programming tools, and operating systems (all built by hackers) are now widely available. Which brings me neatly to our next topic&#8230;</p>

<h4>Get one of the open-source Unixes and learn to use and run it.</h4>

<p>I&#8217;ll assume you have a personal computer or can get access to one. (Take a moment to appreciate how much that means. The hacker culture originally evolved back when computers were so expensive that individuals could not own them.) The single most important step any newbie can take toward acquiring hacker skills is to get a copy of Linux or one of the BSD-Unixes or OpenSolaris, install it on a personal machine, and run it.</p>

<p>Yes, there are other operating systems in the world besides Unix. But they&#8217;re distributed in binary — you can&#8217;t read the code, and you can&#8217;t modify it. Trying to learn to hack on a Microsoft Windows machine or under any other closed-source system is like trying to learn to dance while wearing a body cast.</p>

<p>Under Mac OS X it&#8217;s possible, but only part of the system is open source — you&#8217;re likely to hit a lot of walls, and you have to be careful not to develop the bad habit of depending on Apple&#8217;s proprietary code. If you concentrate on the Unix under the hood you can learn some useful things.</p>

<p>Unix is the operating system of the Internet. While you can learn to use the Internet without knowing Unix, you can&#8217;t be an Internet hacker without understanding Unix. For this reason, the hacker culture today is pretty strongly Unix-centered. (This wasn&#8217;t always true, and some old-time hackers still aren&#8217;t happy about it, but the symbiosis between Unix and the Internet has become strong enough that even Microsoft&#8217;s muscle doesn&#8217;t seem able to seriously dent it.)</p>

<p>So, bring up a Unix — I like Linux myself but there are other ways (and yes, you can run both Linux and Microsoft Windows on the same machine). Learn it. Run it. Tinker with it. Talk to the Internet with it. Read the code. Modify the code. You&#8217;ll get better programming tools (including C, LISP, Python, and Perl) than any Microsoft operating system can dream of hosting, you&#8217;ll have fun, and you&#8217;ll soak up more knowledge than you realize you&#8217;re learning until you look back on it as a master hacker.</p>

<p>For more about learning Unix, see The Loginataka. You might also want to have a look at The Art Of Unix Programming.</p>

<p>To get your hands on a Linux, see the Linux Online! site; you can download from there or (better idea) find a local Linux user group to help you with installation.</p>

<p>During the first ten years of this HOWTO&#8217;s life, I reported that from a new user&#8217;s point of view, all Linux distributions are almost equivalent. But in 2006-2007, an actual best choice emerged: Ubuntu. While other distros have their own areas of strength, Ubuntu is far and away the most accessible to Linux newbies.</p>

<p>You can find BSD Unix help and resources at <a href="">www.bsd.org</a>.</p>

<p>A good way to dip your toes in the water is to boot up what Linux fans call a live CD, a distribution that runs entirely off a CD without having to modify your hard disk. This will be slow, because CDs are slow, but it&#8217;s a way to get a look at the possibilities without having to do anything drastic.</p>

<p>I have written a primer on the basics of Unix and the Internet.</p>

<p>I used to recommend against installing either Linux or BSD as a solo project if you&#8217;re a newbie. Nowadays the installers have gotten good enough that doing it entirely on your own is possible, even for a newbie. Nevertheless, I still recommend making contact with your local Linux user&#8217;s group and asking for help. It can&#8217;t hurt, and may smooth the process.</p>

<h4>Learn how to use the World Wide Web and write HTML.</h4>

<p>Most of the things the hacker culture has built do their work out of sight, helping run factories and offices and universities without any obvious impact on how non-hackers live. The Web is the one big exception, the huge shiny hacker toy that even politicians admit has changed the world. For this reason alone (and a lot of other good ones as well) you need to learn how to work the Web.</p>

<p>This doesn&#8217;t just mean learning how to drive a browser (anyone can do that), but learning how to write HTML, the Web&#8217;s markup language. If you don&#8217;t know how to program, writing HTML will teach you some mental habits that will help you learn. So build a home page. Try to stick to XHTML, which is a cleaner language than classic HTML. (There are good beginner tutorials on the Web; here&#8217;s one.)</p>

<p>But just having a home page isn&#8217;t anywhere near good enough to make you a hacker. The Web is full of home pages. Most of them are pointless, zero-content sludge — very snazzy-looking sludge, mind you, but sludge all the same (for more on this see The HTML Hell Page).</p>

<p>To be worthwhile, your page must have content — it must be interesting and/or useful to other hackers. And that brings us to the next topic&#8230;</p>

<h4>If you don&#8217;t have functional English, learn it.</h4>

<p>As an American and native English-speaker myself, I have previously been reluctant to suggest this, lest it be taken as a sort of cultural imperialism. But several native speakers of other languages have urged me to point out that English is the working language of the hacker culture and the Internet, and that you will need to know it to function in the hacker community.</p>

<p>Back around 1991 I learned that many hackers who have English as a second language use it in technical discussions even when they share a birth tongue; it was reported to me at the time that English has a richer technical vocabulary than any other language and is therefore simply a better tool for the job. For similar reasons, translations of technical books written in English are often unsatisfactory (when they get done at all).</p>

<p>Linus Torvalds, a Finn, comments his code in English (it apparently never occurred to him to do otherwise). His fluency in English has been an important factor in his ability to recruit a worldwide community of developers for Linux. It&#8217;s an example worth following.</p>

<p>Being a native English-speaker does not guarantee that you have language skills good enough to function as a hacker. If your writing is semi-literate, ungrammatical, and riddled with misspellings, many hackers (including myself) will tend to ignore you. While sloppy writing does not invariably mean sloppy thinking, we&#8217;ve generally found the correlation to be strong — and we have no use for sloppy thinkers. If you can&#8217;t yet write competently, learn to.</p>

<h3>Status in the Hacker Culture</h3>

<ol>
<li>Write open-source software</li>
<li>Help test and debug open-source software</li>
<li>Publish useful information</li>
<li>Help keep the infrastructure working</li>
<li>Serve the hacker culture itself</li>
</ol>


<p>Like most cultures without a money economy, hackerdom runs on reputation. You&#8217;re trying to solve interesting problems, but how interesting they are, and whether your solutions are really good, is something that only your technical peers or superiors are normally equipped to judge.</p>

<p>Accordingly, when you play the hacker game, you learn to keep score primarily by what other hackers think of your skill (this is why you aren&#8217;t really a hacker until other hackers consistently call you one). This fact is obscured by the image of hacking as solitary work; also by a hacker-cultural taboo (gradually decaying since the late 1990s but still potent) against admitting that ego or external validation are involved in one&#8217;s motivation at all.</p>

<p>Specifically, hackerdom is what anthropologists call a gift culture. You gain status and reputation in it not by dominating other people, nor by being beautiful, nor by having things other people want, but rather by giving things away. Specifically, by giving away your time, your creativity, and the results of your skill.</p>

<p>There are basically five kinds of things you can do to be respected by hackers:</p>

<h4>Write open-source software</h4>

<p>The first (the most central and most traditional) is to write programs that other hackers think are fun or useful, and give the program sources away to the whole hacker culture to use.</p>

<p>(We used to call these works “free software”, but this confused too many people who weren&#8217;t sure exactly what “free” was supposed to mean. Most of us now prefer the term “open-source” software).</p>

<p>Hackerdom&#8217;s most revered demigods are people who have written large, capable programs that met a widespread need and given them away, so that now everyone uses them.</p>

<p>But there&#8217;s a bit of a fine historical point here. While hackers have always looked up to the open-source developers among them as our community&#8217;s hardest core, before the mid-1990s most hackers most of the time worked on closed source. This was still true when I wrote the first version of this HOWTO in 1996; it took the mainstreaming of open-source software after 1997 to change things. Today, &#8220;the hacker community&#8221; and &#8220;open-source developers&#8221; are two descriptions for what is essentially the same culture and population — but it is worth remembering that this was not always so. (For more on this, see the section called “Historical Note: Hacking, Open Source, and Free Software”.)</p>

<h4>Help test and debug open-source software</h4>

<p>They also serve who stand and debug open-source software. In this imperfect world, we will inevitably spend most of our software development time in the debugging phase. That&#8217;s why any open-source author who&#8217;s thinking will tell you that good beta-testers (who know how to describe symptoms clearly, localize problems well, can tolerate bugs in a quickie release, and are willing to apply a few simple diagnostic routines) are worth their weight in rubies. Even one of these can make the difference between a debugging phase that&#8217;s a protracted, exhausting nightmare and one that&#8217;s merely a salutary nuisance.</p>

<p>If you&#8217;re a newbie, try to find a program under development that you&#8217;re interested in and be a good beta-tester. There&#8217;s a natural progression from helping test programs to helping debug them to helping modify them. You&#8217;ll learn a lot this way, and generate good karma with people who will help you later on.</p>

<h4>Publish useful information</h4>

<p>Another good thing is to collect and filter useful and interesting information into web pages or documents like Frequently Asked Questions (FAQ) lists, and make those generally available.</p>

<p>Maintainers of major technical FAQs get almost as much respect as open-source authors.</p>

<h4>Help keep the infrastructure working</h4>

<p>The hacker culture (and the engineering development of the Internet, for that matter) is run by volunteers. There&#8217;s a lot of necessary but unglamorous work that needs done to keep it going — administering mailing lists, moderating newsgroups, maintaining large software archive sites, developing RFCs and other technical standards.</p>

<p>People who do this sort of thing well get a lot of respect, because everybody knows these jobs are huge time sinks and not as much fun as playing with code. Doing them shows dedication.</p>

<h4>Serve the hacker culture itself</h4>

<p>Finally, you can serve and propagate the culture itself (by, for example, writing an accurate primer on how to become a hacker :-)). This is not something you&#8217;ll be positioned to do until you&#8217;ve been around for while and become well-known for one of the first four things.</p>

<p>The hacker culture doesn&#8217;t have leaders, exactly, but it does have culture heroes and tribal elders and historians and spokespeople. When you&#8217;ve been in the trenches long enough, you may grow into one of these. Beware: hackers distrust blatant ego in their tribal elders, so visibly reaching for this kind of fame is dangerous. Rather than striving for it, you have to sort of position yourself so it drops in your lap, and then be modest and gracious about your status.</p>

<h3>The Hacker/Nerd Connection</h3>

<p>Contrary to popular myth, you don&#8217;t have to be a nerd to be a hacker. It does help, however, and many hackers are in fact nerds. Being something of a social outcast helps you stay concentrated on the really important things, like thinking and hacking.</p>

<p>For this reason, many hackers have adopted the label ‘geek’ as a badge of pride — it&#8217;s a way of declaring their independence from normal social expectations (as well as a fondness for other things like science fiction and strategy games that often go with being a hacker). The term &#8216;nerd&#8217; used to be used this way back in the 1990s, back when &#8216;nerd&#8217; was a mild pejorative and &#8216;geek&#8217; a rather harsher one; sometime after 2000 they switched places, at least in U.S. popular culture, and there is now even a significant geek-pride culture among people who aren&#8217;t techies.</p>

<p>If you can manage to concentrate enough on hacking to be good at it and still have a life, that&#8217;s fine. This is a lot easier today than it was when I was a newbie in the 1970s; mainstream culture is much friendlier to techno-nerds now. There are even growing numbers of people who realize that hackers are often high-quality lover and spouse material.</p>

<p>If you&#8217;re attracted to hacking because you don&#8217;t have a life, that&#8217;s OK too — at least you won&#8217;t have trouble concentrating. Maybe you&#8217;ll get a life later on.</p>

<h3>Points For Style</h3>

<p>Again, to be a hacker, you have to enter the hacker mindset. There are some things you can do when you&#8217;re not at a computer that seem to help. They&#8217;re not substitutes for hacking (nothing is) but many hackers do them, and feel that they connect in some basic way with the essence of hacking.</p>

<p>Learn to write your native language well. Though it&#8217;s a common stereotype that programmers can&#8217;t write, a surprising number of hackers (including all the most accomplished ones I know of) are very able writers.</p>

<p>Read science fiction. Go to science fiction conventions (a good way to meet hackers and proto-hackers).</p>

<p>Train in a martial-arts form. The kind of mental discipline required for martial arts seems to be similar in important ways to what hackers do. The most popular forms among hackers are definitely Asian empty-hand arts such as Tae Kwon Do, various forms of Karate, Kung Fu, Aikido, or Ju Jitsu. Western fencing and Asian sword arts also have visible followings. In places where it&#8217;s legal, pistol shooting has been rising in popularity since the late 1990s. The most hackerly martial arts are those which emphasize mental discipline, relaxed awareness, and control, rather than raw strength, athleticism, or physical toughness.</p>

<p>Study an actual meditation discipline. The perennial favorite among hackers is Zen (importantly, it is possible to benefit from Zen without acquiring a religion or discarding one you already have). Other styles may work as well, but be careful to choose one that doesn&#8217;t require you to believe crazy things.</p>

<p>Develop an analytical ear for music. Learn to appreciate peculiar kinds of music. Learn to play some musical instrument well, or how to sing.</p>

<p>Develop your appreciation of puns and wordplay.</p>

<p>The more of these things you already do, the more likely it is that you are natural hacker material. Why these things in particular is not completely clear, but they&#8217;re connected with a mix of left- and right-brain skills that seems to be important; hackers need to be able to both reason logically and step outside the apparent logic of a problem at a moment&#8217;s notice.</p>

<p>Work as intensely as you play and play as intensely as you work. For true hackers, the boundaries between &#8220;play&#8221;, &#8220;work&#8221;, &#8220;science&#8221; and &#8220;art&#8221; all tend to disappear, or to merge into a high-level creative playfulness. Also, don&#8217;t be content with a narrow range of skills. Though most hackers self-describe as programmers, they are very likely to be more than competent in several related skills — system administration, web design, and PC hardware troubleshooting are common ones. A hacker who&#8217;s a system administrator, on the other hand, is likely to be quite skilled at script programming and web design. Hackers don&#8217;t do things by halves; if they invest in a skill at all, they tend to get very good at it.</p>

<p><strong>Finally, a few things not to do.</strong></p>

<ul>
<li>Don&#8217;t use a silly, grandiose user ID or screen name.</li>
<li>Don&#8217;t get in flame wars on Usenet (or anywhere else).</li>
<li>Don&#8217;t call yourself a ‘cyberpunk’, and don&#8217;t waste your time on anybody who does.</li>
<li>Don&#8217;t post or email writing that&#8217;s full of spelling errors and bad grammar.</li>
</ul>


<p>The only reputation you&#8217;ll make doing any of these things is as a twit. Hackers have long memories — it could take you years to live your early blunders down enough to be accepted.</p>

<p>The problem with screen names or handles deserves some amplification. Concealing your identity behind a handle is a juvenile and silly behavior characteristic of crackers, warez d00dz, and other lower life forms. Hackers don&#8217;t do this; they&#8217;re proud of what they do and want it associated with their real names. So if you have a handle, drop it. In the hacker culture it will only mark you as a loser.</p>

<h3>Historical Note: Hacking, Open Source, and Free Software</h3>

<p>When I originally wrote this how-to in late 1996, some of the conditions around it were very different from the way they look today. A few words about these changes may help clarify matters for people who are confused about the relationship of open source, free software, and Linux to the hacker community. If you are not curious about this, you can skip straight to the FAQ and bibliography from here.</p>

<p>The hacker ethos and community as I have described it here long predates the emergence of Linux after 1990; I first became involved with it around 1976, and, its roots are readily traceable back to the early 1960s. But before Linux, most hacking was done on either proprietary operating systems or a handful of quasi-experimental homegrown systems like MIT&#8217;s ITS that were never deployed outside of their original academic niches. While there had been some earlier (pre-Linux) attempts to change this situation, their impact was at best very marginal and confined to communities of dedicated true believers which were tiny minorities even within the hacker community, let alone with respect to the larger world of software in general.</p>

<p>What is now called &#8220;open source&#8221; goes back as far as the hacker community does, but until 1985 it was an unnamed folk practice rather than a conscious movement with theories and manifestos attached to it. This prehistory ended when, in 1985, arch-hacker Richard Stallman (&#8220;RMS&#8221;) tried to give it a name — &#8220;free software&#8221;. But his act of naming was also an act of claiming; he attached ideological baggage to the &#8220;free software&#8221; label which much of the existing hacker community never accepted. As a result, the &#8220;free software&#8221; label was loudly rejected by a substantial minority of the hacker community (especially among those associated with BSD Unix), and used with serious but silent reservations by a majority of the remainder (including myself).</p>

<p>Despite these reservations, RMS&#8217;s claim to define and lead the hacker community under the &#8220;free software&#8221; banner broadly held until the mid-1990s. It was seriously challenged only by the rise of Linux. Linux gave open-source development a natural home. Many projects issued under terms we would now call open-source migrated from proprietary Unixes to Linux. The community around Linux grew explosively, becoming far larger and more heterogenous than the pre-Linux hacker culture. RMS determinedly attempted to co-opt all this activity into his &#8220;free software&#8221; movement, but was thwarted by both the exploding diversity of the Linux community and the public skepticism of its founder, Linus Torvalds. Torvalds continued to use the term &#8220;free software&#8221; for lack of any alternative, but publicly rejected RMS&#8217;s ideological baggage. Many younger hackers followed suit.</p>

<p>In 1996, when I first published this Hacker HOWTO, the hacker community was rapidly reorganizing around Linux and a handful of other open-source operating systems (notably those descended from BSD Unix). Community memory of the fact that most of us had spent decades developing closed-source software on closed-source operating systems had not yet begun to fade, but that fact was already beginning to seem like part of a dead past; hackers were, increasingly, defining themselves as hackers by their attachments to open-source projects such as Linux or Apache.</p>

<p>The term &#8220;open source&#8221;, however, had not yet emerged; it would not do so until early 1998. When it did, most of hacker community adopted it within the following six months; the exceptions were a minority ideologically attached to the term &#8220;free software&#8221;. Since 1998, and especially after about 2003, the identification of &#8216;hacking&#8217; with &#8216;open-source (and free software) development&#8217; has become extremely close. Today there is little point in attempting to distinguish between these categories, and it seems unlikely that will change in the future.</p>

<p>It is worth remembering, however, that this was not always so.</p>

<h3>Other Resources</h3>

<p>Paul Graham has written an essay called Great Hackers, and another on Undergraduation, in which he speaks much wisdom.</p>

<p>There is a document called How To Be A Programmer that is an excellent complement to this one. It has valuable advice not just about coding and skillsets, but about how to function on a programming team.</p>

<p>I have also written A Brief History Of Hackerdom.</p>

<p>I have written a paper, The Cathedral and the Bazaar, which explains a lot about how the Linux and open-source cultures work. I have addressed this topic even more directly in its sequel Homesteading the Noosphere.</p>

<p>Rick Moen has written an excellent document on how to run a Linux user group.</p>

<p>Rick Moen and I have collaborated on another document on How To Ask Smart Questions. This will help you seek assistance in a way that makes it more likely that you will actually get it.</p>

<p>If you need instruction in the basics of how personal computers, Unix, and the Internet work, see The Unix and Internet Fundamentals HOWTO.</p>

<p>When you release software or write patches for software, try to follow the guidelines in the Software Release Practice HOWTO.</p>

<p>If you enjoyed the Zen poem, you might also like Rootless Root: The Unix Koans of Master Foo.</p>

<h3>Frequently Asked Questions</h3>

<ul>
<li>Q: How do I tell if I am already a hacker?</li>
<li>Q: Will you teach me how to hack?</li>
<li>Q: How can I get started, then?</li>
<li>Q: When do you have to start? Is it too late for me to learn?</li>
<li>Q: How long will it take me to learn to hack?</li>
<li>Q: Is Visual Basic a good language to start with?</li>
<li>Q: Would you help me to crack a system, or teach me how to crack?</li>
<li>Q: How can I get the password for someone else&#8217;s account?</li>
<li>Q: How can I break into/read/monitor someone else&#8217;s email?</li>
<li>Q: How can I steal channel op privileges on IRC?</li>
<li>Q: I&#8217;ve been cracked. Will you help me fend off further attacks?</li>
<li>Q: I&#8217;m having problems with my Windows software. Will you help me?</li>
<li>Q: Where can I find some real hackers to talk with?</li>
<li>Q: Can you recommend useful books about hacking-related subjects?</li>
<li>Q: Do I need to be good at math to become a hacker?</li>
<li>Q: What language should I learn first?</li>
<li>Q: What kind of hardware do I need?</li>
<li>Q: I want to contribute. Can you help me pick a problem to work on?</li>
<li>Q: Do I need to hate and bash Microsoft?</li>
<li>Q: But won&#8217;t open-source software leave programmers unable to make a living?</li>
<li>Q: Where can I get a free Unix?</li>
</ul>


<p>Q:</p>

<pre><code>How do I tell if I am already a hacker?
</code></pre>

<p>A:</p>

<blockquote><p>Ask yourself the following three questions:</p>

<p>Do you speak code, fluently?</p>

<p>Do you identify with the goals and values of the hacker community?</p>

<p>Has a well-established member of the hacker community ever called you a hacker?</p>

<p>If you can answer yes to all three of these questions, you are already a hacker. No two alone are sufficient.</p>

<p>The first test is about skills. You probably pass it if you have the minimum technical skills described earlier in this document. You blow right through it if you have had a substantial amount of code accepted by an open-source development project.</p>

<p>The second test is about attitude. If the five principles of the hacker mindset seemed obvious to you, more like a description of the way you already live than anything novel, you are already halfway to passing it. That&#8217;s the inward half; the other, outward half is the degree to which you identify with the hacker community&#8217;s long-term projects.</p>

<p>Here is an incomplete but indicative list of some of those projects: Does it matter to you that Linux improve and spread? Are you passionate about software freedom? Hostile to monopolies? Do you act on the belief that computers can be instruments of empowerment that make the world a richer and more humane place?</p>

<p>But a note of caution is in order here. The hacker community has some specific, primarily defensive political interests — two of them are defending free-speech rights and fending off &#8220;intellectual-property&#8221; power grabs that would make open source illegal. Some of those long-term projects are civil-liberties organizations like the Electronic Frontier Foundation, and the outward attitude properly includes support of them. But beyond that, most hackers view attempts to systematize the hacker attitude into an explicit political program with suspicion; we&#8217;ve learned, the hard way, that these attempts are divisive and distracting. If someone tries to recruit you to march on your capitol in the name of the hacker attitude, they&#8217;ve missed the point. The right response is probably “Shut up and show them the code.”</p>

<p>The third test has a tricky element of recursiveness about it. I observed in the section called “What Is a Hacker?” that being a hacker is partly a matter of belonging to a particular subculture or social network with a shared history, an inside and an outside. In the far past, hackers were a much less cohesive and self-aware group than they are today. But the importance of the social-network aspect has increased over the last thirty years as the Internet has made connections with the core of the hacker subculture easier to develop and maintain. One easy behavioral index of the change is that, in this century, we have our own T-shirts.</p>

<p>Sociologists, who study networks like those of the hacker culture under the general rubric of &#8220;invisible colleges&#8221;, have noted that one characteristic of such networks is that they have gatekeepers — core members with the social authority to endorse new members into the network. Because the &#8220;invisible college&#8221; that is hacker culture is a loose and informal one, the role of gatekeeper is informal too. But one thing that all hackers understand in their bones is that not every hacker is a gatekeeper. Gatekeepers have to have a certain degree of seniority and accomplishment before they can bestow the title. How much is hard to quantify, but every hacker knows it when they see it.</p></blockquote>

<p>Q:</p>

<pre><code>Will you teach me how to hack?
</code></pre>

<p>A:</p>

<blockquote><p>Since first publishing this page, I&#8217;ve gotten several requests a week (often several a day) from people to &#8220;teach me all about hacking&#8221;. Unfortunately, I don&#8217;t have the time or energy to do this; my own hacking projects, and working as an open-source advocate, take up 110% of my time.</p>

<p>Even if I did, hacking is an attitude and skill you basically have to teach yourself. You&#8217;ll find that while real hackers want to help you, they won&#8217;t respect you if you beg to be spoon-fed everything they know.</p>

<p>Learn a few things first. Show that you&#8217;re trying, that you&#8217;re capable of learning on your own. Then go to the hackers you meet with specific questions.</p>

<p>If you do email a hacker asking for advice, here are two things to know up front. First, we&#8217;ve found that people who are lazy or careless in their writing are usually too lazy and careless in their thinking to make good hackers — so take care to spell correctly, and use good grammar and punctuation, otherwise you&#8217;ll probably be ignored. Secondly, don&#8217;t dare ask for a reply to an ISP account that&#8217;s different from the account you&#8217;re sending from; we find people who do that are usually thieves using stolen accounts, and we have no interest in rewarding or assisting thievery.</p></blockquote>

<p>Q:</p>

<pre><code>How can I get started, then?
</code></pre>

<p>A:</p>

<blockquote><p>The best way for you to get started would probably be to go to a LUG (Linux user group) meeting. You can find such groups on the LDP General Linux Information Page; there is probably one near you, possibly associated with a college or university. LUG members will probably give you a Linux if you ask, and will certainly help you install one and get started.</p></blockquote>

<p>Q:</p>

<pre><code>When do you have to start? Is it too late for me to learn?
</code></pre>

<p>A:</p>

<pre><code>Any age at which you are motivated to start is a good age. Most people seem to get interested between ages 15 and 20, but I know of exceptions in both directions.
</code></pre>

<p>Q:</p>

<pre><code>How long will it take me to learn to hack?
</code></pre>

<p>A:</p>

<blockquote><p>That depends on how talented you are and how hard you work at it. Most people who try can acquire a respectable skill set in eighteen months to two years, if they concentrate. Don&#8217;t think it ends there, though; in hacking (as in many other fields) it takes about ten years to achieve mastery. And if you are a real hacker, you will spend the rest of your life learning and perfecting your craft.</p></blockquote>

<p>Q:</p>

<pre><code>Is Visual Basic a good language to start with?
</code></pre>

<p>A:</p>

<blockquote><p>If you&#8217;re asking this question, it almost certainly means you&#8217;re thinking about trying to hack under Microsoft Windows. This is a bad idea in itself. When I compared trying to learn to hack under Windows to trying to learn to dance while wearing a body cast, I wasn&#8217;t kidding. Don&#8217;t go there. It&#8217;s ugly, and it never stops being ugly.</p>

<p>There is a specific problem with Visual Basic; mainly that it&#8217;s not portable. Though there is a prototype open-source implementations of Visual Basic, the applicable ECMA standards don&#8217;t cover more than a small set of its programming interfaces. On Windows most of its library support is proprietary to a single vendor (Microsoft); if you aren&#8217;t extremely careful about which features you use — more careful than any newbie is really capable of being — you&#8217;ll end up locked into only those platforms Microsoft chooses to support. If you&#8217;re starting on a Unix, much better languages with better libraries are available. Python, for example.</p>

<p>Also, like other Basics, Visual Basic is a poorly-designed language that will teach you bad programming habits. No, don&#8217;t ask me to describe them in detail; that explanation would fill a book. Learn a well-designed language instead.</p>

<p>One of those bad habits is becoming dependent on a single vendor&#8217;s libraries, widgets, and development tools. In general, any language that isn&#8217;t fully supported under at least Linux or one of the BSDs, and/or at least three different vendors&#8217; operating systems, is a poor one to learn to hack in.</p></blockquote>

<p>Q:</p>

<pre><code>Would you help me to crack a system, or teach me how to crack?
</code></pre>

<p>A:</p>

<blockquote><p>No. Anyone who can still ask such a question after reading this FAQ is too stupid to be educable even if I had the time for tutoring. Any emailed requests of this kind that I get will be ignored or answered with extreme rudeness.</p></blockquote>

<p>Q:</p>

<pre><code>How can I get the password for someone else's account?
</code></pre>

<p>A:</p>

<blockquote><p>This is cracking. Go away, idiot.</p></blockquote>

<p>Q:</p>

<pre><code>How can I break into/read/monitor someone else's email?
</code></pre>

<p>A:</p>

<blockquote><p>This is cracking. Get lost, moron.</p></blockquote>

<p>Q:</p>

<pre><code>How can I steal channel op privileges on IRC?
</code></pre>

<p>A:</p>

<blockquote><p>This is cracking. Begone, cretin.</p></blockquote>

<p>Q:</p>

<pre><code>I've been cracked. Will you help me fend off further attacks?
</code></pre>

<p>A:</p>

<blockquote><p>No. Every time I&#8217;ve been asked this question so far, it&#8217;s been from some poor sap running Microsoft Windows. It is not possible to effectively secure Windows systems against crack attacks; the code and architecture simply have too many flaws, which makes securing Windows like trying to bail out a boat with a sieve. The only reliable prevention starts with switching to Linux or some other operating system that is designed to at least be capable of security.</p></blockquote>

<p>Q:</p>

<pre><code>I'm having problems with my Windows software. Will you help me?
</code></pre>

<p>A:</p>

<blockquote><p>Yes. Go to a DOS prompt and type &#8220;format c:&#8221;. Any problems you are experiencing will cease within a few minutes.</p></blockquote>

<p>Q:</p>

<pre><code>Where can I find some real hackers to talk with?
</code></pre>

<p>A:</p>

<blockquote><p>The best way is to find a Unix or Linux user&#8217;s group local to you and go to their meetings (you can find links to several lists of user groups on the LDP site at ibiblio).</p>

<p>(I used to say here that you wouldn&#8217;t find any real hackers on IRC, but I&#8217;m given to understand this is changing. Apparently some real hacker communities, attached to things like GIMP and Perl, have IRC channels now.)</p></blockquote>

<p>Q:</p>

<pre><code>Can you recommend useful books about hacking-related subjects?
</code></pre>

<p>A:</p>

<blockquote><p>I maintain a Linux Reading List HOWTO that you may find helpful. The Loginataka may also be interesting.</p>

<p>For an introduction to Python, see the tutorial on the Python site.</p></blockquote>

<p>Q:</p>

<pre><code>Do I need to be good at math to become a hacker?
</code></pre>

<p>A:</p>

<blockquote><p>No. Hacking uses very little formal mathematics or arithmetic. In particular, you won&#8217;t usually need trigonometry, calculus or analysis (there are exceptions to this in a handful of specific application areas like 3-D computer graphics). Knowing some formal logic and Boolean algebra is good. Some grounding in finite mathematics (including finite-set theory, combinatorics, and graph theory) can be helpful.</p>

<p>Much more importantly: you need to be able to think logically and follow chains of exact reasoning, the way mathematicians do. While the content of most mathematics won&#8217;t help you, you will need the discipline and intelligence to handle mathematics. If you lack the intelligence, there is little hope for you as a hacker; if you lack the discipline, you&#8217;d better grow it.</p>

<p>I think a good way to find out if you have what it takes is to pick up a copy of Raymond Smullyan&#8217;s book What Is The Name Of This Book?. Smullyan&#8217;s playful logical conundrums are very much in the hacker spirit. Being able to solve them is a good sign; enjoying solving them is an even better one.</p></blockquote>

<p>Q:</p>

<pre><code>What language should I learn first?
</code></pre>

<p>A:</p>

<blockquote><p>XHTML (the latest dialect of HTML) if you don&#8217;t already know it. There are a lot of glossy, hype-intensive bad HTML books out there, and distressingly few good ones. The one I like best is HTML: The Definitive Guide.</p>

<p>But HTML is not a full programming language. When you&#8217;re ready to start programming, I would recommend starting with Python. You will hear a lot of people recommending Perl, and Perl is still more popular than Python, but it&#8217;s harder to learn and (in my opinion) less well designed.</p>

<p>C is really important, but it&#8217;s also much more difficult than either Python or Perl. Don&#8217;t try to learn it first.</p>

<p>Windows users, do not settle for Visual Basic. It will teach you bad habits, and it&#8217;s not portable off Windows. Avoid.</p></blockquote>

<p>Q:</p>

<pre><code>What kind of hardware do I need?
</code></pre>

<p>A:</p>

<blockquote><p>It used to be that personal computers were rather underpowered and memory-poor, enough so that they placed artificial limits on a hacker&#8217;s learning process. This stopped being true in the mid-1990s; any machine from an Intel 486DX50 up is more than powerful enough for development work, X, and Internet communications, and the smallest disks you can buy today are plenty big enough.</p>

<p>The important thing in choosing a machine on which to learn is whether its hardware is Linux-compatible (or BSD-compatible, should you choose to go that route). Again, this will be true for almost all modern machines. The only really sticky areas are modems and wireless cards; some machines have Windows-specific hardware that won&#8217;t work with Linux.</p>

<p>There&#8217;s a FAQ on hardware compatibility; the latest version is here.</p></blockquote>

<p>Q:</p>

<pre><code>I want to contribute. Can you help me pick a problem to work on?
</code></pre>

<p>A:</p>

<blockquote><p>No, because I don&#8217;t know your talents or interests. You have to be self-motivated or you won&#8217;t stick, which is why having other people choose your direction almost never works.</p>

<p>Try this. Watch the project announcements scroll by on Freshmeat for a few days. When you see one that makes you think &#8220;Cool! I&#8217;d like to work on that!&#8221;, join it.</p></blockquote>

<p>Q:</p>

<pre><code>Do I need to hate and bash Microsoft?
</code></pre>

<p>A:</p>

<blockquote><p>No, you don&#8217;t. Not that Microsoft isn&#8217;t loathsome, but there was a hacker culture long before Microsoft and there will still be one long after Microsoft is history. Any energy you spend hating Microsoft would be better spent on loving your craft. Write good code — that will bash Microsoft quite sufficiently without polluting your karma.</p></blockquote>

<p>Q:</p>

<pre><code>But won't open-source software leave programmers unable to make a living?
</code></pre>

<p>A:</p>

<blockquote><p>This seems unlikely — so far, the open-source software industry seems to be creating jobs rather than taking them away. If having a program written is a net economic gain over not having it written, a programmer will get paid whether or not the program is going to be open-source after it&#8217;s done. And, no matter how much &#8220;free&#8221; software gets written, there always seems to be more demand for new and customized applications. I&#8217;ve written more about this at the Open Source pages.</p></blockquote>

<p>Q:</p>

<pre><code>Where can I get a free Unix?
</code></pre>

<p>A:</p>

<blockquote><p>If you don&#8217;t have a Unix installed on your machine yet, elsewhere on this page I include pointers to where to get the most commonly used free Unix. To be a hacker you need motivation and initiative and the ability to educate yourself. Start now&#8230;</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Tips]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/11/25/markdown/"/>
    <updated>2012-11-25T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/11/25/markdown</id>
    <content type="html"><![CDATA[<p>This is just a test of <em>awesome</em> Jekyll static website generator.</p>

<h3>Block Elements</h3>

<h4>段落 (PARAGRAPH)</h4>

<p>连续的行就会自然地形成段落，如果出现空行，则会自动分段</p>

<p>你瞧，是不是分段了？因为我真的空了一行:)</p>

<h4>标题 (HEADER)</h4>

<h5>Setext-style</h5>

<p>在一行文字下加任意数量的=和-就分别得到一级标题和二级标题</p>

<h1>This is an H1</h1>

<h2>This is an H2</h2>

<h5>Atx-style</h5>

<p>在一行文字前加 1 到 6 个 # 就让这行文字变成标题</p>

<h1>This is an H1</h1>

<h2>This is an H2</h2>

<h6>This is an H6</h6>

<h4>块引用 (BLOCKQUOTE)</h4>

<blockquote><p>This is a blockquote with two paragraphs.
This is a blockquote with two paragraphs.
This is a blockquote with two paragraphs.</p>

<blockquote><p>This is a blockquote with two paragraphs.
This is a blockquote with two paragraphs.</p></blockquote></blockquote>

<h4>列表 (LIST)</h4>

<p><em>中文的列表有问题，必须把markdown引擎由默认的 maruku 换成 rdiscount 或者其他的。</em></p>

<p>在配置文件 <code>_config.yml</code> 中添上</p>

<pre><code>markdown: rdiscount
</code></pre>

<ul>
<li>星号可以</li>
<li>加号亦可</li>
<li>减号居然也可以</li>
<li>随便什么数字也行，靠，还又没天理？</li>
</ul>


<h4>代码块 (CODE BLOCK)</h4>

<p>This is a normal paragraph:</p>

<pre><code>This is a code block.
</code></pre>

<h4>水平线 (HORIZONTAL RULE)</h4>

<hr />

<hr />

<hr />

<hr />

<hr />

<h3>行内元素 (SPAN ELEMENT)</h3>

<h4>链接 (LINK)</h4>

<p>This is <a href="https://www.google.com" title="Google">google</a> inline link.</p>

<p><a href="http://www.baidu.com">No title</a> has no title attribute.</p>

<p>This is <a href="http://wangwangwra.github.com/help">relative</a> link on the same server.</p>

<p>This is <a href="http://another-example.com" title="Example">an example</a> reference-style link.</p>

<h4>强调 (EMPHASIS)</h4>

<p>这是<em>单星号</em></p>

<p>这是<em>单下划线</em></p>

<p><strong>双星号</strong>牛逼一些</p>

<p><strong>双下划线</strong>和上面是一样的</p>

<p>*货真价实被双星号包围的感觉不错吧*</p>

<h4>代码 (CODE)</h4>

<p>Use the <code>printf()</code> function.</p>

<p><code>There is a literal backtick (`) here.</code></p>

<p>A single backtick in a code span: <code>`</code></p>

<p>A backtick-delimited string in a code span: <code>`foo`</code></p>

<h4>图片 (IMAGE)</h4>

<p><img src="http://wangwangwra.github.com/assets/themes/twitter/bootstrap/img/glyphicons-halflings.png" title="Img" alt="Alt text" /></p>
]]></content>
  </entry>
  
</feed>
