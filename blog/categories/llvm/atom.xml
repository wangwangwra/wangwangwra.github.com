<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: llvm | My Octopress Blog]]></title>
  <link href="http://wangwangra.github.com/blog/categories/llvm/atom.xml" rel="self"/>
  <link href="http://wangwangra.github.com/"/>
  <updated>2012-12-19T16:10:35+08:00</updated>
  <id>http://wangwangra.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[llvm [1]]]></title>
    <link href="http://wangwangra.github.com/blog/2012/12/16/llvm-1/"/>
    <updated>2012-12-16T00:00:00+08:00</updated>
    <id>http://wangwangra.github.com/blog/2012/12/16/llvm-1</id>
    <content type="html"><![CDATA[<p>llvm bundle outline <a href="http://llvm.org/docs/GettingStarted.html#llvm-tools">[llvm1]</a></p>

<ul>
<li><p>bugpoint</p>

<pre><code>  bugpoint is used to debug optimization passes or code generation 
  backends by narrowing down the given test case to the minimum number
  of passes and/or instructions that still cause a problem, whether it 
  is a crash or miscompilation. 
</code></pre></li>
<li><p>llvm-ar</p>

<pre><code>  The archiver produces an archive containing the given LLVM bitcode 
  files, optionally with an index for faster lookup.
</code></pre></li>
<li><p>llvm-as</p>

<pre><code>  The assembler transforms the human readable LLVM assembly to LLVM 
  bitcode.
</code></pre></li>
<li><p>llvm-dis</p>

<pre><code>  The disassembler transforms the LLVM bitcode to human readable LLVM 
  assembly.
</code></pre></li>
<li><p>llvm-link</p>

<pre><code>  llvm-link, not surprisingly, links multiple LLVM modules into a 
  single program.
</code></pre></li>
<li><p>lli</p>

<pre><code>  lli is the LLVM interpreter, which can directly execute LLVM bitcode 
  (although very slowly...). For architectures that support it 
  (currently x86, Sparc, and PowerPC), by default, lli will function as 
  a Just-In-Time compiler (if the functionality was compiled in), and 
  will execute the code much faster than the interpreter.
</code></pre></li>
<li><p>llc</p>

<pre><code>  llc is the LLVM backend compiler, which translates LLVM bitcode to a 
  native code assembly file or to C code (with the -march=c option).
</code></pre></li>
<li><p>opt</p>

<pre><code>  opt reads LLVM bitcode, applies a series of LLVM to LLVM 
  transformations (which are specified on the command line), and then 
  outputs the resultant bitcode. The ‘opt -help‘ command is a good way 
  to get a list of the program transformations available in LLVM.

  opt can also be used to run a specific analysis on an input LLVM 
  bitcode file and print out the results. It is primarily useful for 
  debugging analyses, or familiarizing yourself with what an analysis 
  does.
</code></pre></li>
<li><p>llvm-config</p>

<pre><code>  llvm-config can print the compiler flags, linker flags and object 
  libraries needed to link against llvm.
</code></pre></li>
</ul>


<hr />
]]></content>
  </entry>
  
</feed>
