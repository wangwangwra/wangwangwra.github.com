<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: llvm | T_T]]></title>
  <link href="http://wangwangwra.github.com/blog/categories/llvm/atom.xml" rel="self"/>
  <link href="http://wangwangwra.github.com/"/>
  <updated>2012-12-19T17:40:37+08:00</updated>
  <id>http://wangwangwra.github.com/</id>
  <author>
    <name><![CDATA[wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[llvm [1]]]></title>
    <link href="http://wangwangwra.github.com/blog/2012/12/16/llvm-1/"/>
    <updated>2012-12-16T00:00:00+08:00</updated>
    <id>http://wangwangwra.github.com/blog/2012/12/16/llvm-1</id>
    <content type="html"><![CDATA[<p>llvm bundle outline <a href="http://llvm.org/docs/GettingStarted.html#llvm-tools">[llvm1]</a></p>

<h3>bugpoint</h3>

<blockquote><p>bugpoint is used to debug optimization passes or code generation
backends by narrowing down the given test case to the minimum number
of passes and/or instructions that still cause a problem, whether it
is a crash or miscompilation.</p></blockquote>

<h3>llvm-ar</h3>

<blockquote><p>The archiver produces an archive containing the given LLVM bitcode
files, optionally with an index for faster lookup.</p></blockquote>

<h3>llvm-as</h3>

<blockquote><p>The assembler transforms the human readable LLVM assembly to LLVM
bitcode.</p></blockquote>

<h3>llvm-dis</h3>

<blockquote><p>The disassembler transforms the LLVM bitcode to human readable LLVM
assembly.</p></blockquote>

<h3>llvm-link</h3>

<blockquote><p>llvm-link, not surprisingly, links multiple LLVM modules into a
single program.</p></blockquote>

<h3>lli</h3>

<blockquote><p>lli is the LLVM interpreter, which can directly execute LLVM bitcode
(although very slowly...). For architectures that support it
(currently x86, Sparc, and PowerPC), by default, lli will function as
a Just-In-Time compiler (if the functionality was compiled in), and
will execute the code much faster than the interpreter.</p></blockquote>

<h3>llc</h3>

<blockquote><p>llc is the LLVM backend compiler, which translates LLVM bitcode to a
native code assembly file or to C code (with the -march=c option).</p></blockquote>

<h3>opt</h3>

<blockquote><p>opt reads LLVM bitcode, applies a series of LLVM to LLVM
transformations (which are specified on the command line), and then
outputs the resultant bitcode. The ‘opt -help‘ command is a good way
to get a list of the program transformations available in LLVM.</p>

<p>opt can also be used to run a specific analysis on an input LLVM
bitcode file and print out the results. It is primarily useful for
debugging analyses, or familiarizing yourself with what an analysis
does.</p></blockquote>

<h3>llvm-config</h3>

<blockquote><p>llvm-config can print the compiler flags, linker flags and object
 libraries needed to link against llvm.</p></blockquote>

<hr />
]]></content>
  </entry>
  
</feed>
